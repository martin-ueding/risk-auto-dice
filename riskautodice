#!/usr/bin/python
# -*- coding: utf-8 -*-

# Copyright (c) 2011-2012 Martin Ueding <dev@martin-ueding.de>

import gettext
import optparse
import random
import sys

def main():
	gettext.bindtextdomain("riskautodice", "l10n")
	gettext.textdomain("riskautodice")
	_ = gettext.gettext

	parser = optparse.OptionParser(description=_('automates the dice rolling in the classic game "risk"').decode("utf-8"), usage=_("usage: %prog attacking defending").decode("utf-8"))
	parser.add_option("-v", "--verbose", dest="verbose", action="store_true", default=False, help=_("show each step of rolling the dice").decode("utf-8"))
	(options, args) = parser.parse_args()
	del parser

	if len(args) != 2:
		print _("call with -h to get help")
		sys.exit(1)

	# import the number of units fighting
	attacking = int(args[0])
	defending = int(args[1])

	# fight until the last man standing
	while attacking > 0 and defending > 0:
		red_dice = [0]*min(attacking, 3)
		blue_dice = [0]*min(defending, 2, attacking)

		# roll the dice
		for i in range(len(red_dice)):
			red_dice[i] = random.randint(1, 6)
		for i in range(len(blue_dice)):
			blue_dice[i] = random.randint(1, 6)

		red_dice.sort()
		blue_dice.sort()

		if options.verbose:
			print _("the attacker: %(red_dice_list)s, the defender: %(blue_dice_list)s") % {"red_dice_list": red_dice, "blue_dice_list": blue_dice}

		for r, b in zip(reversed(red_dice), reversed(blue_dice)):
			if r > b:
				attacking -= 1
				if options.verbose:
					winner = _("attacker")
			else:
				defending -= 1
				if options.verbose:
					winner = _("defender")

			if options.verbose:
				print _("%(red)s vs %(blue)s, winner: %(winner)s") % {"red": r, "blue": b, "winner": winner}

		if options.verbose:
			print

	if attacking > 0:
		print _("attacker wins with %s units left") % attacking
	else:
		print _("defender wins with %s units left") % defending

if __name__ == "__main__":
	main()
